const fs = require('fs');
const path = require('path');

const formulas = require('../src/data/formulas');

function escapeSingleQuote(input) {
  return input.replace(/'/g, '\\\'');
}

function parseMusics() {
  const csvPath = path.join(__dirname, '../src/data/musics.csv');
  const csv = fs.readFileSync(csvPath, { encoding: 'utf8' });

  const jsLines = [
    '/***',
    ' * THIS FILE IS AUTOMATICALLY GENERATED FROM DATA',
    ' * DO NOT ATTEMPT TO MODIFY THIS FILE BY HAND',
    ' */',
    '',
    'module.exports = [',
  ];

  // line by line
  const lines = csv.split('\n');
  const lineRegex = new RegExp(
    // category won't include comma
    '^([^,]*)' +
    // non-greedy match for title & exclude quote
    ',"?(.*?)"?' +
    // levels
    ',([0-9.]*)'.repeat(4 * 4)
  );

  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (line === '') continue;

    const match = line.match(lineRegex);
    if (match[1] === '') continue;


    jsLines.push(
      `  { category: '${match[1]}', title: '${escapeSingleQuote(match[2])}'` +
      `, nm4: '${match[ 3]}', hd4: '${match[ 4]}', mx4: '${match[ 5]}', sc4: '${match[ 6]}'` +
      `, nm5: '${match[ 7]}', hd5: '${match[ 8]}', mx5: '${match[ 9]}', sc5: '${match[10]}'` +
      `, nm6: '${match[11]}', hd6: '${match[12]}', mx6: '${match[13]}', sc6: '${match[14]}'` +
      `, nm8: '${match[15]}', hd8: '${match[16]}', mx8: '${match[17]}', sc8: '${match[18]}'` +
      ' },'
    );
  }

  jsLines.push('];\n');

  const jsPath = path.join(__dirname, '../src/data/musics.js');
  const js = jsLines.join('\n');
  fs.writeFileSync(jsPath, js);
}

function calculatePotentialSkillpoint() {
  const potentials = {
    '4': 0,
    '5': 0,
    '6': 0,
    '8': 0,
  };

  const musics = require('../src/data/musics');

  function getSkillpoint(music, difficulty, buttons) {
    if (music[difficulty + buttons] !== '') {
      return formulas.getSkillpoint(buttons, music[difficulty + buttons], 1, true);
    }

    return 0;
  }

  for (const buttons in potentials) {
    const skillpoints = [];

    for (const music of musics) {
      skillpoints.push(Math.max(
        getSkillpoint(music, 'nm', buttons),
        getSkillpoint(music, 'hd', buttons),
        getSkillpoint(music, 'mx', buttons),
        getSkillpoint(music, 'sc', buttons),
      ));
    }

    // sort descending
    skillpoints.sort((a, b) => b - a);

    // sum of top 50 entries
    const potential = skillpoints.slice(0, 50).reduce((p, c) => p + c, 0);
    potentials[buttons] = potential
  }

  const jsPath = path.join(__dirname, '../src/data/computed.js');
  const js = [
    '/***',
    ' * THIS FILE IS AUTOMATICALLY GENERATED FROM DATA',
    ' * DO NOT ATTEMPT TO MODIFY THIS FILE BY HAND',
    ' */',
    '',
    'module.exports.MAXIMUM_POTENTIAL_SKILLPOINT = {',
    `  '4': ${potentials['4']},`,
    `  '5': ${potentials['5']},`,
    `  '6': ${potentials['6']},`,
    `  '8': ${potentials['8']},`,
    '};\n',
  ].join('\n');
  fs.writeFileSync(jsPath, js);

}

parseMusics();
calculatePotentialSkillpoint();
